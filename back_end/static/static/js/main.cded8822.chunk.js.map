{"version":3,"sources":["views/searchPage.js","views/resPage.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Search","Input","SearchCSSDiv","styled","div","React","memo","props","console","log","className","placeholder","onSearch","value","history","push","key","Date","now","btn","type","size","onClick","notification","close","open","message","description","openNotification","enterButton","Swiper","path","exact","component","searchPage","useState","match","params","keyword","pic","setPic","isLoad","setIsLoad","useEffect","fetch","then","res","json","url","tip","width","src","moment","locale","App","zhCN","renderRoutes","config","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"wsBAGQA,EAAWC,IAAXD,OACFE,EAAeC,IAAOC,IAAV,KAkDHC,UAAMC,MApBrB,SAAoBC,GAEhB,OADAC,QAAQC,IAAIF,GAER,kBAACL,EAAD,KACI,yBAAKQ,UAAU,cACX,kBAACV,EAAD,CAAQW,YAAY,yDAChBC,SAAU,SAAAC,GACQ,KAAVA,EACAN,EAAMO,QAAQC,KAAd,eAA2BF,IAvB9B,WACrB,IAAMG,EAAG,cAAUC,KAAKC,OAClBC,EACF,kBAAC,IAAD,CAAQC,KAAK,UAAUC,KAAK,QAAQC,QAAS,kBAAMC,IAAaC,MAAMR,KAAtE,gBAIJO,IAAaE,KAAK,CACdC,QAAS,eACTC,YAAa,yDACbR,MACAH,QAcoBY,IAIRC,aAAW,S,gfC7C/B,IAAMC,EAAS3B,IAAOC,IAAV,KA+CGC,IChDA,GACX,CACI0B,KAAM,IACNC,OAAO,EACPC,UAAWC,GAEf,CACIH,KAAM,cACNC,OAAO,EACPC,UDuCO5B,IAAMC,MA9BrB,SAAiBC,GAAQ,IAAD,EACU4B,mBAAS5B,EAAM6B,MAAMC,OAAOxB,OADtC,mBACbyB,EADa,aAEEH,mBAAS,KAFX,mBAEbI,EAFa,KAERC,EAFQ,OAGQL,oBAAS,GAHjB,mBAGbM,EAHa,KAGLC,EAHK,KAWpB,OAPAC,qBAAU,WACNC,MAAM,8CAAD,OAA+CN,IAAWO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAC,GACxFtC,QAAQC,IAAIqC,EAAIE,KAChBR,EAAOM,EAAIE,KACXN,GAAU,QAEf,IACK,6BACJ,kBAACZ,EAAD,KAEI,kBAAC,IAAD,CAAQV,KAAK,UAAUV,UAAU,WAAWY,QAAS,WAAQf,EAAMO,QAAQC,KAAK,OAAhF,6BAEE0B,GAAU,kBAAC,IAAD,CAAMQ,IAAI,cAClB,kBAAC,IAAD,CACIvB,QAAQ,iCACRC,YAAY,iFACZP,KAAK,UAGZqB,GAAU,kBAAC,IAAD,CACPS,MAAO,IACPC,IAAG,sCAAiCZ,Y,kDElCpDa,IAAOC,OAAO,SAaCC,MAZf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgB2C,OAAQE,KACrBC,YAAaC,OCLJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCZN0B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAM9C,a","file":"static/js/main.cded8822.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Input, Button, notification } from 'antd';\r\nconst { Search } = Input;\r\nconst SearchCSSDiv = styled.div`\r\n    background:url('https://xgpax.top/wp-content/uploads/2020/08/天气之子.jpg') 100%;   \r\n    margin:auto;\r\n    padding:auto;\r\n    width:100vw;\r\n    height:100vh;\r\n    text-align:center;\r\n    display:flex;\r\n    flex-direction:column;\r\n    justify-content:center;\r\n    align-items:center;\r\n    .search-box{\r\n        width:700px;\r\n    }\r\n`\r\nconst openNotification = () => {\r\n    const key = `open${Date.now()}`;\r\n    const btn = (\r\n        <Button type=\"primary\" size=\"small\" onClick={() => notification.close(key)}>\r\n            确认\r\n        </Button>\r\n    );\r\n    notification.open({\r\n        message: '提示',\r\n        description: \"请输入要搜索的内容\",\r\n        btn,\r\n        key,\r\n        // onClose: close,\r\n    });\r\n};\r\nfunction SearchPage(props) {\r\n    console.log(props)\r\n    return (\r\n        <SearchCSSDiv>\r\n            <div className='search-box'>\r\n                <Search placeholder=\"请输入要查找的岗位\"\r\n                    onSearch={value => {\r\n                        if (value !== \"\") {\r\n                            props.history.push(`/res/${value}`)\r\n                        } else {\r\n                            openNotification()\r\n                        }\r\n\r\n                    }}\r\n                    enterButton />\r\n            </div>\r\n\r\n        </SearchCSSDiv>\r\n    )\r\n}\r\nexport default React.memo(SearchPage)\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Image, Spin, Alert, Button } from 'antd';\r\nimport styled from 'styled-components'\r\nconst Swiper = styled.div`\r\n    background:url('https://xgpax.top/wp-content/uploads/2020/08/天气之子.jpg') 100%;\r\n    margin:auto;\r\n    padding:auto;\r\n    width:100vw;\r\n    height:100vh;\r\n    text-align:center;\r\n    display:flex;\r\n    flex-direction:column;\r\n    justify-content:center;\r\n    align-items:center;\r\n    .left-top{\r\n        position: fixed;\r\n        left:30px;\r\n        top:50px;\r\n    }\r\n`\r\nfunction ResPage(props) {\r\n    const [keyword, setKeyword] = useState(props.match.params.value)\r\n    const [pic, setPic] = useState(\"\")\r\n    const [isLoad, setIsLoad] = useState(false)\r\n    useEffect(() => {\r\n        fetch(`http://47.102.212.191:10010/getPic?keyword=${keyword}`).then(res => res.json()).then(res => {\r\n            console.log(res.url)\r\n            setPic(res.url)\r\n            setIsLoad(true)\r\n        })\r\n    }, [])\r\n    return (<div>\r\n        <Swiper>\r\n\r\n            <Button type=\"primary\" className=\"left-top\" onClick={() => { props.history.push('/') }}>返回上层</Button>\r\n\r\n            {!isLoad && <Spin tip=\"Loading...\">\r\n                <Alert\r\n                    message=\"正在请求中\"\r\n                    description=\"正在为您生成专业技能词云图\"\r\n                    type=\"info\"\r\n                />\r\n            </Spin>}\r\n            {isLoad && <Image\r\n                width={500}\r\n                src={`http://47.102.212.191:10010/${pic}`}\r\n            />}\r\n        </Swiper>\r\n    </div>)\r\n}\r\nexport default React.memo(ResPage)","import searchPage from '../views/searchPage'\r\nimport resPage from '../views/resPage'\r\nexport default [\r\n    {\r\n        path: '/',\r\n        exact: true,\r\n        component: searchPage,\r\n    },\r\n    {\r\n        path: '/res/:value',\r\n        exact: true,\r\n        component: resPage,\r\n    }\r\n]","import React from 'react';\nimport { HashRouter as Router } from 'react-router-dom'\nimport { renderRoutes } from 'react-router-config'\nimport config from './routes/index'\n// 由于 antd 组件的默认文案是英文，所以需要修改为中文\nimport zhCN from 'antd/es/locale/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport { ConfigProvider } from 'antd';\nmoment.locale('zh-cn');\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <ConfigProvider locale={zhCN}>\n          {renderRoutes(config)}\n        </ConfigProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}